name: Terraform

on: 
  push:
    branches:
    - main
    paths:
    - terraform/**
  pull_request:
    branches:
    - main
    paths:
    - terraform/**

env:
  AWS_REGION: us-east-2
  TERRAFORM_VERSION: 1.4.6

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      id: checkout_repo
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      id: configure_aws_credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Setup Terraform
      id: setup_terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    - name: Terraform Init
      id: terraform_init
      run: terraform init
      working-directory: ./terraform
      shell: bash
    - name: Terraform Plan
      id: terraform_plan
      run: terraform plan -input=false -no-color -out tf.plan
      working-directory: ./terraform
      shell: bash
    - name: Terraform Show
      id: terraform_show
      run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
      working-directory: ./terraform
      shell: bash
    - name: Comment on Pull Request
      id: comment_on_pull_request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const fs = require("fs");
          const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
          const maxGitHubBodyCharacters = 65536;

          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }

          // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
          var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
          for (let i = 0; i < plans.length; i++) {
            const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
            #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${plans[i]}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    


# # This is a basic workflow to help you get started with Actions
# name:Connect to an AWS role from a GitHub repository

# # Controls when the action will run. Invokes the workflow on push events but only for the main branch
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
  
#   AWS_REGION : <"us-east-1"> #Change to reflect your Region

# # Permission can be added at job level or workflow level    
# permissions:
#       id-token: write   # This is required for requesting the JWT
#       contents: read    # This is required for actions/checkout
# jobs:
#   AssumeRoleAndCallIdentity:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Git clone the repository
#         uses: actions/checkout@v3
#       - name: configure aws credentials
#         uses: aws-actions/configure-aws-credentials@v1.7.0
#         with:
#           role-to-assume: <arn:aws:iam::111122223333:role/GitHubAction-AssumeRoleWithAction> #change to reflect your IAM role’s ARN
#           role-session-name: GitHub_to_AWS_via_FederatedOIDC
#           aws-region: ${{ env.AWS_REGION }}
#       # Hello from AWS: WhoAmI
#       - name: Sts GetCallerIdentity
#         run: |
#           aws sts get-caller-identity
